package org.proyecto;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.*;
import org.proyecto.Errors.Exceptions;

/* 2. Codigo para el parser, variables, metodos */
class Parser;

parser code
{:
    //Clases, objetos, variables, lista, etc... en sintaxis java

    //Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    ArrayList<String> results = new ArrayList<String>();
    ArrayList<String> regex = new ArrayList<String>();

    // List of errors
    List<Exceptions> errors = new ArrayList();
    // Method to add errors
    public void syntax_error(Symbol s) {
        errors.add(new Exceptions("Error Sintáctico", (String) s.value, "Error sintáctico detectado", s.left, s.right));
    }
    //Unrecovered syntax error detected.
     public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errors.add(new Exceptions("Error Sintáctico", (String) s.value, "Error sintáctico detectado sin recuperación", s.left, s.right));
     }

     public ArrayList<Exceptions> getErrors(){
         return (ArrayList<Exceptions>) errors;
     }

:}


/* Terminals */
terminal  LBRACE, RBRACE, CONJ, ID,ARROW, ARROW1, ARROW2, SEMICOLON, COLON, TILDE, SPECIAL, LETTER, NUMBER, PLUS, STAR, QUESTION, OR, DOT, COMMA, STRING,PERCENT;

/* Non terminal */
non terminal ini;
non terminal body;
non terminal option;
non terminal option_2;
non terminal re;

start with ini;
/* production rules */
ini ::= LBRACE body RBRACE  {: System.out.println("The file was written correctly" ); :};

body ::= CONJ COLON ID ARROW1 ARROW2 option TILDE option SEMICOLON body {:  :}
        | CONJ COLON ID ARROW1 ARROW2 option_2 SEMICOLON body           {: :}
        | ID ARROW1 ARROW2 re:var SEMICOLON body                        {:
                                                                    System.out.println("Reading a regular expresion " );
                                                                    results.add(regex.toString());
                                                                 :}
        | PERCENT  body                                         {:  :}
        | ID COLON STRING SEMICOLON body                        {:  :}
        | /* empty */
        ;

re ::=
      |PLUS:var re:a              {:
                                    System.out.println(var);
                                    RESULT = regex.add((String) var);
                                :}
      |STAR:var re:a              {:
                                    System.out.println(var);
                                    RESULT = regex.add((String) var);
                                :}
      |QUESTION:var re:a          {:
                                    System.out.println(var);
                                    RESULT = regex.add((String) var);
                                :}
      |OR:var re:a                {:
                                    System.out.println( var);
                                    RESULT = regex.add((String) var);
                                :}
      |DOT:var re:a               {:
                                    System.out.println( var);
                                    RESULT = regex.add((String) var);
                                :}
      |LBRACE ID:var RBRACE re:a  {:
                                    System.out.println(var);
                                    RESULT = regex.add((String) var);
                                :}
      |STRING:var re:a            {:
                                    System.out.println( var);
                                    RESULT = regex.add((String) "\""+ var + "\"");
                                :}
      ;


option ::= LETTER
          |NUMBER
          |SPECIAL
          ;

option_2 ::= LETTER  COMMA option_2
            |NUMBER  COMMA option_2
            |SPECIAL COMMA option_2
            |option
            ;